fn main() {
    //println!("Hello, world!");
    //kh·ªüi t·∫°o 1 bi·∫øn 
    let mut x = 10; //mut  - mutable : c√≥ th·ªÉ ƒë∆∞·ª£c bi·∫øn ƒë·ªïi ,neus ko c√≥ s·∫Ω l·ªói v√¨ let l√† bi·∫øn b·∫•t bi·∫øn

    println!("x = {}",x);
    x = 20;
    println!("x = {}",x);
    //khai b√°o h·∫±ng s·ªë trong Rust 
    //const HANG_SO : u32= 100000000000; //u32 l√† 32 bit 
    //u32 ch·ªâ ƒë∆∞·ª£c ho·∫°t ƒë·ªông trong 1 kho·∫£ng t·ª´ 0 - 4 294 967 295
    //cao h∆°n th√¨ d√πng u128
    const HANG_SO : u128= 100_000_000_000;
    println!("H·∫±ng s·ªë  = {}",HANG_SO);
    //c√≥ th·ªÉ s·ª≠ d·ª•ng _ ƒë·ªÉ ph√¢n bi·ªát bn ch·ªØ s·ªë vs u128 = 1000000000 = 1_000_000_000
    
    //shadowing(b√≥ng t·ªëi)
    let x = 10;
    println!("x : {}",x);
    let x = "Ti·ªÅn";
    println!("x ={}",x);
    let outer = 10 ;
    {
        let inner  = 200;
        println!("inner = {}", inner);
        let outer = 300 ; 
        println!("outer = {}",outer); // trong c√πng ph·∫°m vi , bi·∫øn c≈© s·∫Ω b·ªã che ph·ªß b∆°i bi·∫øn m·ªõi

    }
    println!("outer = {}",outer); // trong ph·∫°m vi n√†y , bi·∫øn c≈© ƒë∆∞·ª£c l√¥i ra  

    
    // C√°c ki·ªÉu d·ªØ li·ªáu --DATA TyPE
     //+ Scalar Data : 1 bi·∫øn ƒë∆°n vd let x = ,,,, , kh·ªüi t·∫°o 1 c√°i d·ªØ li·ªáu duy nh·∫•t
    //Integer
    let a: i32 = 111_111; //Demicals
    let b: i32 = 0xff ;//Hex 0 -255 ,th√™m 1 s·ªë s·∫Ω ko ch·∫•p nh·∫≠n
    let c : i32 = 0o77;//Octal
    let d : i32 = 0b1111_0000;//Binany : m√£ nh·ªã ph√¢n
    let e : u8 = b'A'; //Byte (ch·ªâ c√≥ u8 onlu u8)  nh·∫≠n dienj ƒëc to√†n b·ªô m√£ ƒë·∫•y
    println!("a = {}",a);
    println!("b = {}",b);
    println!("c = {}",c);
    println!("d = {}",d);
    println!("e = {}",e);
    //Float : Gi·ªëng h·∫ßu h·∫øt ng√¥n ng·ªØ kh√°c
    let f:f64 = 2.0;
    let j:f32 = 3.0;
    let sum : i32 = 3+4;
    let subtraction : i32 = 4-3;      // subtraction : ph√©p tr·ª´
    let multiplication : i32 = 3*5;
    let division :f64 = 20.4 / 10.1;
    let remainder : i32 = 20%3;  //ph√©p l·∫•y ph·∫ßn d∆∞
    println!("f = {}",f);
    println!("j = {}",j);
    println!("sum = {}",sum);
    println!("subtraction= {}",subtraction);
    println!("multiplication = {}",multiplication);
    println!("division = {}",division);
    println!("remainder = {}",remainder);
    //String 

    //Bolean 
    //let i = true;
    //let h :bool = false;
    //Character
    let f = "z"; 
    let r = 'üòÄ';//ch·∫•p nh·∫≠n icon ,.. yumicode j ƒë√≥
    println!("f = {}",f);
    println!("r = {}",r);

    //---------------------------------------------
     //+Compound Data : t·ªïng hop nhieu fkieeur duex li·ªáu trong 1 bi·∫øn t∆∞∆°ng t·ª± nhu array,...
    //+ Tuple : l√† 1 d·∫°ng  d·ªØ li·ªáu t√≠ch hop nhi·ªÅu ki·ªÉu d·ªØ li·ªáu   trong 1 tuple (th)
    let tupp :(&str,i32) = ("TRaLY",100);
    //println!("{}",tup);  // s·∫Ω l·ªói v√¨ ko bi·∫øt in ra kieurw d·ªØ li·ªáu n√†o ??
    println!("{:?}",tupp); 
    let (_string, _integer) = tupp;
    let _integer : i32  = tupp.1;
    println!("{}",_integer);
    println!("{}", _string);
    //array : l√† 1 danh s√°ch c√≥ k√≠ch thuowcs c·ªë ƒë·ªãnh ,  c√°c d·ªØ li·ªáu ƒë·ªìng nh·∫•t 1  d·ªØ li·ªáu
    let number : [i32;3] = [122,204,037];
    let get_number : i32 = number[1];
    println!("number = {}",get_number);
    let _hashing:[i32;32] = [0; 32];
    println!("Hasing = {:?}",_hashing)   ;       //32 s·ªõ
    //c2 d√πng forr
    for i in _hashing.iter(){
        //iter l·∫•y ra t·ª´ng item ·ªü trong _hashing
        print!("{}",i);
    }


}
// file cargo d√πng ƒë·ªÉ li·ªát k√™  import v√†o packeage ,hu vi·ªán
